// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
        model "main/domain/model"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockUsecaseInterface is a mock of UsecaseInterface interface.
type MockUsecaseInterface struct {
        ctrl     *gomock.Controller
        recorder *MockUsecaseInterfaceMockRecorder
}

// MockUsecaseInterfaceMockRecorder is the mock recorder for MockUsecaseInterface.
type MockUsecaseInterfaceMockRecorder struct {
        mock *MockUsecaseInterface
}

// NewMockUsecaseInterface creates a new mock instance.
func NewMockUsecaseInterface(ctrl *gomock.Controller) *MockUsecaseInterface {
        mock := &MockUsecaseInterface{ctrl: ctrl}
        mock.recorder = &MockUsecaseInterfaceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseInterface) EXPECT() *MockUsecaseInterfaceMockRecorder {
        return m.recorder
}

// CheckToken mocks base method.
func (m *MockUsecaseInterface) CheckToken(tok string) (int, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CheckToken", tok)
        ret0, _ := ret[0].(int)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockUsecaseInterfaceMockRecorder) CheckToken(tok interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockUsecaseInterface)(nil).CheckToken), tok)
}

// CreateBanner mocks base method.
func (m *MockUsecaseInterface) CreateBanner(req model.CreateBanner) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateBanner", req)
        ret0, _ := ret[0].(error)
        return ret0
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockUsecaseInterfaceMockRecorder) CreateBanner(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockUsecaseInterface)(nil).CreateBanner), req)
}

// DeleteBanner mocks base method.
func (m *MockUsecaseInterface) DeleteBanner(id int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteBanner", id)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockUsecaseInterfaceMockRecorder) DeleteBanner(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*MockUsecaseInterface)(nil).DeleteBanner), id)
}

// FillDB mocks base method.
func (m *MockUsecaseInterface) FillDB(tagCount, featureCount, bannerCount int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FillDB", tagCount, featureCount, bannerCount)
        ret0, _ := ret[0].(error)
        return ret0
}

// FillDB indicates an expected call of FillDB.
func (mr *MockUsecaseInterfaceMockRecorder) FillDB(tagCount, featureCount, bannerCount interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillDB", reflect.TypeOf((*MockUsecaseInterface)(nil).FillDB), tagCount, featureCount, bannerCount)
}

// GetBanners mocks base method.
func (m *MockUsecaseInterface) GetBanners(tagId, featureId, limit, offset int) ([]model.Banner, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetBanners", tagId, featureId, limit, offset)
        ret0, _ := ret[0].([]model.Banner)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetBanners indicates an expected call of GetBanners.
func (mr *MockUsecaseInterfaceMockRecorder) GetBanners(tagId, featureId, limit, offset interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanners", reflect.TypeOf((*MockUsecaseInterface)(nil).GetBanners), tagId, featureId, limit, offset)
}

// GetUserBanner mocks base method.
func (m *MockUsecaseInterface) GetUserBanner(tagId, featureId int, useLastVers bool) (*model.UserBanner, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUserBanner", tagId, featureId, useLastVers)
        ret0, _ := ret[0].(*model.UserBanner)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetUserBanner indicates an expected call of GetUserBanner.
func (mr *MockUsecaseInterfaceMockRecorder) GetUserBanner(tagId, featureId, useLastVers interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBanner", reflect.TypeOf((*MockUsecaseInterface)(nil).GetUserBanner), tagId, featureId, useLastVers)
}

// GetUsers mocks base method.
func (m *MockUsecaseInterface) GetUsers() ([]model.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUsers")
        ret0, _ := ret[0].([]model.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUsecaseInterfaceMockRecorder) GetUsers() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUsecaseInterface)(nil).GetUsers))
}

// UpdateBanner mocks base method.
func (m *MockUsecaseInterface) UpdateBanner(id int, req model.CreateBanner) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateBanner", id, req)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateBanner indicates an expected call of UpdateBanner.
func (mr *MockUsecaseInterfaceMockRecorder) UpdateBanner(id, req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBanner", reflect.TypeOf((*MockUsecaseInterface)(nil).UpdateBanner), id, req)
}