// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
        model "main/domain/model"
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
)

// MockStoreInterface is a mock of StoreInterface interface.
type MockStoreInterface struct {
        ctrl     *gomock.Controller
        recorder *MockStoreInterfaceMockRecorder
}

// MockStoreInterfaceMockRecorder is the mock recorder for MockStoreInterface.
type MockStoreInterfaceMockRecorder struct {
        mock *MockStoreInterface
}

// NewMockStoreInterface creates a new mock instance.
func NewMockStoreInterface(ctrl *gomock.Controller) *MockStoreInterface {
        mock := &MockStoreInterface{ctrl: ctrl}
        mock.recorder = &MockStoreInterfaceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreInterface) EXPECT() *MockStoreInterfaceMockRecorder {
        return m.recorder
}

// CheckTokenDB mocks base method.
func (m *MockStoreInterface) CheckTokenDB(tok string) (int, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CheckTokenDB", tok)
        ret0, _ := ret[0].(int)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CheckTokenDB indicates an expected call of CheckTokenDB.
func (mr *MockStoreInterfaceMockRecorder) CheckTokenDB(tok interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTokenDB", reflect.TypeOf((*MockStoreInterface)(nil).CheckTokenDB), tok)
}

// CreateBannerDB mocks base method.
func (m *MockStoreInterface) CreateBannerDB(req model.CreateBanner) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateBannerDB", req)
        ret0, _ := ret[0].(error)
        return ret0
}

// CreateBannerDB indicates an expected call of CreateBannerDB.
func (mr *MockStoreInterfaceMockRecorder) CreateBannerDB(req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBannerDB", reflect.TypeOf((*MockStoreInterface)(nil).CreateBannerDB), req)
}

// DeleteBannerDB mocks base method.
func (m *MockStoreInterface) DeleteBannerDB(id int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteBannerDB", id)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteBannerDB indicates an expected call of DeleteBannerDB.
func (mr *MockStoreInterfaceMockRecorder) DeleteBannerDB(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBannerDB", reflect.TypeOf((*MockStoreInterface)(nil).DeleteBannerDB), id)
}

// FillDB mocks base method.
func (m *MockStoreInterface) FillDB(tagCount, featureCount, bannerCount int) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FillDB", tagCount, featureCount, bannerCount)
        ret0, _ := ret[0].(error)
        return ret0
}

// FillDB indicates an expected call of FillDB.
func (mr *MockStoreInterfaceMockRecorder) FillDB(tagCount, featureCount, bannerCount interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FillDB", reflect.TypeOf((*MockStoreInterface)(nil).FillDB), tagCount, featureCount, bannerCount)
}

// GetBannersDB mocks base method.
func (m *MockStoreInterface) GetBannersDB(tagId, featureId, limit, offset int) ([]model.Banner, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetBannersDB", tagId, featureId, limit, offset)
        ret0, _ := ret[0].([]model.Banner)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetBannersDB indicates an expected call of GetBannersDB.
func (mr *MockStoreInterfaceMockRecorder) GetBannersDB(tagId, featureId, limit, offset interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannersDB", reflect.TypeOf((*MockStoreInterface)(nil).GetBannersDB), tagId, featureId, limit, offset)
}

// GetUserBannerDB mocks base method.
func (m *MockStoreInterface) GetUserBannerDB(tagId, featureId int) (*model.UserBanner, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUserBannerDB", tagId, featureId)
        ret0, _ := ret[0].(*model.UserBanner)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetUserBannerDB indicates an expected call of GetUserBannerDB.
func (mr *MockStoreInterfaceMockRecorder) GetUserBannerDB(tagId, featureId interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBannerDB", reflect.TypeOf((*MockStoreInterface)(nil).GetUserBannerDB), tagId, featureId)
}

// GetUsersDB mocks base method.
func (m *MockStoreInterface) GetUsersDB() ([]model.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUsersDB")
        ret0, _ := ret[0].([]model.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetUsersDB indicates an expected call of GetUsersDB.
func (mr *MockStoreInterfaceMockRecorder) GetUsersDB() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersDB", reflect.TypeOf((*MockStoreInterface)(nil).GetUsersDB))
}

// UpdateBannerDB mocks base method.
func (m *MockStoreInterface) UpdateBannerDB(id int, req model.CreateBanner) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateBannerDB", id, req)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateBannerDB indicates an expected call of UpdateBannerDB.
func (mr *MockStoreInterfaceMockRecorder) UpdateBannerDB(id, req interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBannerDB", reflect.TypeOf((*MockStoreInterface)(nil).UpdateBannerDB), id, req)
}